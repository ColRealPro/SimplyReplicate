"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[391],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(a),d=r,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||l;return a?n.createElement(g,o(o({ref:t},c),{},{components:a})):n.createElement(g,o({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85787:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={},o="Getting Started",i={unversionedId:"gettingstarted",id:"gettingstarted",title:"Getting Started",description:"Install",source:"@site/docs/gettingstarted.md",sourceDirName:".",slug:"/gettingstarted",permalink:"/SimplyReplicate/docs/gettingstarted",draft:!1,editUrl:"https://github.com/ColRealPro/SimplyReplicate/edit/main/docs/gettingstarted.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"About",permalink:"/SimplyReplicate/docs/intro"},next:{title:"Replicating Data",permalink:"/SimplyReplicate/docs/replicatingdata"}},p={},s=[{value:"Install",id:"install",level:2},{value:"Basic Usage",id:"basic-usage",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"Installing SimplyReplicate is very simple. You can either download the module from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ColRealPro/SimplyReplicate/releases"},"Releases Page")," or install it using Wally."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Roblox Studio:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get the rbxm file from the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ColRealPro/SimplyReplicate/releases"},"Releases Page")," and insert it into your game")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Wally:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add SimplyReplicate to your ",(0,r.kt)("inlineCode",{parentName:"li"},"wally.toml")," dependency list (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},'SimplyReplicate = "colrealpro/simplyreplicate@^0.1.3"'),")"),(0,r.kt)("li",{parentName:"ul"},"Run ",(0,r.kt)("inlineCode",{parentName:"li"},"wally install")," in your terminal")),(0,r.kt)("admonition",{title:"Wally",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Not familiar with Wally? Wally is a package manager (like NPM) for the Roblox ecosystem.\nTo get started, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UpliftGames/wally"},"Wally repository"),".")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"For this example I will demonstrate creating a very simple status replication system"),(0,r.kt)("p",null,"On both the client and the server you are going to want to create a replicator with the same key, and specify the default states and their default values"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Server:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Replicator = require(path.to.module)\n\nlocal GameStateReplicator = Replicator.new("GameState", {\n    Status = "Waiting for players",\n    RoundStarted = false\n})\n')),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"Whatever states you specify when creating the replicator will be the only states you can change, otherwise an error will be thrown")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you are using strict Luau, you will want to add a type cast to the second argument to make everything optional, this way when you go to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"changeStates")," method, you won't have to worry about TypeErrors for missing states")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Client:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Replicator = require(path.to.module)\n\nlocal GameStateReplicator = Replicator.new("GameState")\n')),(0,r.kt)("p",null,"Great! We now have a replicator on both the client and the server, now we can start changing the states and they will be replicated to the client!"),(0,r.kt)("p",null,"To change a state in the replicator we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"changeStates")," method as seen below"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Server:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'GameStateReplicator:changeStates({\n    Status = "Game starting in 5 seconds"\n})\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You do not need to specify all the states when changing them, only the ones you want to change")),(0,r.kt)("p",null,"Now that we have the server able to change the states, we need to listen for the changes on the client, to do this we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"StateChanged")," signal as seen below"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Client:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"GameStateReplicator.StateChanged:Connect(function(state, value)\n    print(state, value) -- Status, Game starting in 5 seconds\nend)\n")),(0,r.kt)("p",null,"Hooraay! You have now successfully created a simple status replication system using SimplyReplicate! This is just the tip of the iceberg, there are many more features and use cases for SimplyReplicate, so be sure to check out ",(0,r.kt)("a",{parentName:"p",href:"/SimplyReplicate/docs/replicatingdata"},"Replicating Data")," or the ",(0,r.kt)("a",{parentName:"p",href:"/api/Replicator"},"API Reference")," for more information."))}m.isMDXComponent=!0}}]);