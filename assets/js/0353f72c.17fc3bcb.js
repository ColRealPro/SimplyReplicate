"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[615],{92533:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new replicator\\n\\n\\n:::warning\\nWhen creating a replicator on the client, this function will yield until the initial data has been fetched from the server\\n:::\\n\\n:::info\\nNote that if you are using strict luau, you will want to specify a type for the data parameter,\\nif you let Luau infer the type, when you go to change the state, it will want you to include every state as it wont have an option to be nil.\\n:::","params":[{"name":"identifier","desc":"","lua_type":"string | Instance"},{"name":"data","desc":"The data that will be replicated to clients","lua_type":"{ [string]: any }"}],"returns":[{"desc":"","lua_type":"Replicator"}],"function_type":"static","yields":true,"source":{"line":128,"path":"lib/Replicator.luau"}},{"name":"changeStates","desc":"Changes states in the replicator and replicate whatever changes to the clients","params":[{"name":"changedStates","desc":"The states that have been changed and their new values","lua_type":"{ [string]: any? }"},{"name":"players","desc":"","lua_type":"({ Player } | Player)?"}],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"Invalid state\\"","desc":"Thrown when the state does not exist in the data structure"}],"source":{"line":191,"path":"lib/Replicator.luau"}},{"name":"syncPlayer","desc":"Syncs a player\'s state with the server\'s state","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[],"function_type":"method","source":{"line":208,"path":"lib/Replicator.luau"}},{"name":"get","desc":"Returns the current state stored in the replicator","params":[{"name":"index","desc":"If provided, returns the state given, otherwise returns all states","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"{ [string]: any } | any\\r\\n"}],"function_type":"method","errors":[{"lua_type":"\\"Invalid state\\"","desc":"Thrown when the state does not exist in the data structure"}],"source":{"line":486,"path":"lib/Replicator.luau"}},{"name":"getForPlayer","desc":"Returns the current state stored in the replicator for a specific player","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"index","desc":"If provided, returns the state given, otherwise returns all states","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"{ [string]: any } | any\\r\\n"}],"function_type":"method","errors":[{"lua_type":"\\"Invalid state\\"","desc":"Thrown when the state does not exist in the data structure"}],"source":{"line":509,"path":"lib/Replicator.luau"}},{"name":"getStateChangedSignal","desc":"Returns a signal that fires when a specific state has changed","params":[{"name":"state","desc":"The state to listen for changes","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Signal<any>"}],"function_type":"method","source":{"line":539,"path":"lib/Replicator.luau"}},{"name":"Destroy","desc":"This function should be called when you are done using the replicator","params":[],"returns":[],"function_type":"method","source":{"line":554,"path":"lib/Replicator.luau"}}],"properties":[{"name":"StateChanged","desc":"A signal that fires when a state has changed\\n\\t","lua_type":"Signal<string, any>","source":{"line":145,"path":"lib/Replicator.luau"}}],"types":[],"name":"Replicator","desc":"This is the main class of SimplyReplicate\\nReplicators are used to replicate data from the server to the client with ease\\n\\nHere is an example implementation of a replicator:\\n\\n**Server:**\\n```lua\\nlocal Replicator = require(path.to.module)\\n\\nlocal GameStateReplicator = Replicator.new(\\"GameState\\", {\\n\\tStatus = \\"Waiting\\",\\n\\tRoundStarted = false,\\n})\\n\\ntask.wait(3)\\n\\nGameStateReplicator:changeStates({\\n\\tStatus = \\"Game starts soon\\",\\n})\\n\\ntask.wait(3)\\n\\nGameStateReplicator:changeStates({\\n\\tStatus = \\"Game started\\",\\n\\tRoundStarted = true,\\n})\\t\\n```\\n\\n**Client:**\\n```lua\\nlocal Replicator = require(path.to.module)\\n\\nlocal GameStateReplicator = Replicator.new(\\"GameState\\")\\n\\nGameStateReplicator.StateChanged:Connect(function(state, value)\\n\\tprint(\\"State changed\\", state, value)\\nend)\\n```","source":{"line":103,"path":"lib/Replicator.luau"}}')}}]);